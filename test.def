include: c/darray.def
include: DefParser.def

include: calc_lex.def
include: calc_exp.def

macros:
    use_double: 1

page: calc, basic_frame
    # $call load_lex
    $include math
    $uselib m

    $if argc>1
	$call calc_cmdline
    $else
	$call calc_readline

subcode: calc_cmdline
    s_line=malloc(4096)
    strcpy(s_line, argv[1])
    $for i=2:argc
	strcat(s_line, " ")
	strcat(s_line, argv[i])
    $call local_input, s_line

    $list parse_expression
    $if parse_expression()
	$print "    %g\n", f_value

subcode: calc_readline
    # &call simple_input
    &call readline_input
	$call local_input, s_line

	$if match_keyword("quit")
	    break
	$elif parse_expression()
	    $print "    %g\n", f_value

# ------------------------------------
subcode: simple_input
    $local s_line[1024]
    $while fgets(s_line, 1024, stdin)
	BLOCK

subcode: readline_input
    $include readline/readline.h
    $include readline/history.h
    $uselib readline
    $local s_line
    $while s_line=readline("calc > ")
	add_history(s_line)
	BLOCK
	free(s_line)

# ------------------------------------
subcode: parse_exp_list
    $local darray explist: double
    $if parse_expression()
	explist.$push f_value
	skip_space()
	$while match_char(',')
	    $if parse_expression()
		explist.$push f_value
	    skip_space()

fncode: check_symbol(ts_token)
    $if ts_token $eq "ans"
	return 1
    $elif ts_token $eq "pi" 
	f_value=3.1415926535
	return 1
    return 0

subcode: do_function_call
    f_value=0.0
    $map trig_call, sin, cos, tan 
    $map trig_inv_call, asin, acos, atan
    $map simple_call, sqrt, exp, log10, log
    &call single_call, abs
	f_value=fabs(explist[0])
    $else
	$print "    Function not supported: %s", symbol

subcode: single_call(name)
    $case symbol $eq "$(name)"
	$if explist_len==1
	    BLOCK
	$else
	    $print "    Function $(name) only accepts single argument"

subcode: simple_call(name)
    &call single_call, $(name)
	f_value=$(name)(explist[0])

subcode: trig_call(name)
    &call single_call, $(name)
	f_value=$(name)(explist[0]*3.1415926535/180.0)

subcode: trig_inv_call(name)
    &call single_call, $(name)
	f_value=$(name)(explist[0])/3.1415926535*180.0
