subcode: straight_op(opchar)
    $case op->data[0] == '$(opchar)'
        $(v2) = $(v1) $(opchar) $(v2)

#---------------------------------------- 
fncode: binary_op_INT(T op, T p1, T p2)
    $(set:v1=*((int*)&(p1->data[0])))
    $(set:v2=*((int*)&(p2->data[0])))

    $map straight_op, +, -, *
    $elif op->data[0] == '/'
        $if $(v1) % $(v2) == 0
            $(v2) = $(v1) / $(v2)
        $else
            p2->type=T_DOUBLE
            $(set:v=*((double*)&(p2->data[0])))
            $(v) = $(v1) / (double)$(v2)

fncode: binary_op_DOUBLE(T op, T p1, T p2)
    $(set:v1=*((double*)&(p1->data[0])))
    $(set:v2=*((double*)&(p2->data[0])))

    $map straight_op, +, -, *, /

fncode: binary_op_COMPLEX(T op, T p1, T p2)
    $(set:r1=(*((double*)&(p1->data[0]))))
    $(set:r2=(*((double*)&(p2->data[0]))))
    $(set:i1=(*((double*)&(p1->data[8]))))
    $(set:i2=(*((double*)&(p2->data[8]))))

    $if op->data[0] == '+'
        $(r2) = $(r1)+$(r2)
        $(i2) = $(i1)+$(i2)
    $elif op->data[0] == '-'
        $(r2) = $(r1)-$(r2)
        $(i2) = $(i1)-$(i2)
    $elif op->data[0] == '*'
        $local double tr, double ti
        tr=$(r1)*$(r2)-$(i1)*$(i2)
        ti=$(r1)*$(i2)+$(r2)*$(i1)
        $(r2)=tr
        $(i2)=ti
    $elif op->data[0] == '*'
        $local double tr, double ti, double tm
        tr=$(r1)*$(r2)+$(i1)*$(i2)
        ti=-$(r1)*$(i2)+$(r2)*$(i1)
        tm=$(r2)*$(r2)+$(i2)*$(i2)
        $(r2)=tr/tm
        $(i2)=ti/tm

#---------------------------------------- 
fncode: unary_op_INT(T op, T p)
    $if op->data[0]=='-'
        $(set:v=*((int*)&(p->data[0])))
        $(v)=-$(v)

fncode: unary_op_DOUBLE(T op, T p)
    $if op->data[0]=='-'
        $(set:v=*((double*)&(p->data[0])))
        $(v)=-$(v)

fncode: unary_op_COMPLEX(T op, T p)
    $if op->data[0]=='-'
        $(set:r=(*((double*)&(p->data[0]))))
        $(set:i=(*((double*)&(p->data[8]))))
        $(r)=-$(r)
        $(i)=-$(i)

