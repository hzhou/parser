fncode: match_Number
    lexical: input, T t

    $local double tf_val=0.0
    $local int tn_val=0

    $call input_get_c, tn_c
    $if !isdigit(tn_c)
	input_back_char(input)
	return 0
    $else
	$if tn_c=='0'
	    tn_matched=0
	    $call input_get_c, tn_c
	    $if tn_c=='x' || tn_c=='X'
		tn_matched=1
		$call @match_hexdecimal
	    $elif tn_c=='b' || tn_c=='B'
		tn_matched=2
		$call @match_binary
	    input_back_char(input)
	    $if tn_matched>0
		set_value_int(t, tn_val)
		return 1
	$else
	    tn_val=tn_c-'0'

	tn_matched=0
	$while 1
	    $call input_get_c, tn_c
	    $if tn_c>='0' && tn_c<='9'
		tn_val=tn_val*10+(tn_c-'0')
		continue
	    $elif tn_c=='.'
		tf_val=tn_val
		$call match_float_point
		tn_matched=2
	    $elif tn_c=='e' || tn_c=='E'
		tf_val=tn_val
		$call match_float_exp
		tn_matched=2
	    $else
		tn_matched=1

	    input_back_char(input)

	    $if tn_matched==1
		set_value_int(t, tn_val)
		return 1
	    $elif tn_matched==2
		set_value_int(t, tf_val)
		return 1

subcode: match_hexdecimal
    # ---- Hexdecimal 
    $while 1
	$call input_get_c, tn_c
	$if tn_c>='0' && tn_c<='9'
	    tn_val=tn_val*16+(tn_c-'0')
	$elif tn_c>='a' && tn_c<='f'
	    tn_val=tn_val*16+10+(tn_c-'a')
	$elif tn_c>='A' && tn_c<='F'
	    tn_val=tn_val*16+10+(tn_c-'A')
	$else
	    break

subcode: match_binary
    # ---- Binary 
    $while 1
	$call input_get_c, tn_c
	$if tn_c>='0' && tn_c<='1'
	    tn_val=tn_val*2+(tn_c-'0')
	$else
	    break

subcode: match_float_point
    tf_place=1
    $while 1
	tf_place*=0.1
	$call input_get_c, tn_c
	$if tn_c>='0' && tn_c<='9'
	    tf_val+=(tn_c-'0')*tf_place
	$elif tn_c=='e' || tn_c=='E'
	    $call match_float_exp
	$else
	    break

subcode: match_float_exp
    tn_power=0
    $while 1
	$call input_get_c, tn_c
	$if tn_c>='0' && tn_c<='9'
	    tn_power=tn_power*10+(tn_c-'0')
	$else
	    tf_val*=pow(10, tn_power)
	    break

