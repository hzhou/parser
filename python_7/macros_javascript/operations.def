#---- operations ---------------------
fncode: get_token_value(var)
    $if var[1]=="identifier"
        $if var[0] in variables
            return variables[var[0]]
        $else
            $call error, "variable "+var[0]+" not defined!"
    $else
        # --- num -----------------
        return var[0]


fncode: unary_op(op, token)
    t = get_token_value(token)
    $if op =='-'
        return -t
    $elif op =='!'
        return not t
    $elif op =='~'
        return ~int(t)
    $if op =='++' or op == '--'
        $if token[1] != "identifier"
            $call error, op+" on non-variable!"
        $if op=='++'
            t+=1
        $else
            t-=1
        variables[token[0]]=t
        return t
    $else
        $call error, "unary operator "+op+" not supported!"

fncode: binary_op(op, a, b)
    t_a = get_token_value(a)
    t_b = get_token_value(b)
    $if 0
        pass
    $map do_binary, +, -, *, /
    $map do_binary_int, %, <<, >>, ^, &, |
    $call do_binary_2, &&, and
    $call do_binary_2, ||, or
    $else
        $call error, "unhandled operator ["+op+"]"

    subcode: do_binary(op)
        $elif op =='$(op)'
            return t_a $(op) t_b

    subcode: do_binary_int(op)
        $elif op =='$(op)'
            return int(t_a) $(op) int(t_b)
        
    subcode: do_binary_2(op, op2)
        $elif op =='$(op)'
            return t_a $(op2) t_b

