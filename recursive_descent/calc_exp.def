include: arithmetic.def
include: calc_fcall.def
#-------------------------------------------- 
subcode: local_stack
    $local T t=NULL

subcode: local_stack_new
    $local struct value_t * temp
    $allocate temp
    temp->type=T_INVALID
    temp->prev=t
    t=temp

subcode: local_stack_back
    temp=t
    t=t->prev
    free(temp)

#---------------------------------------- 
fncode: parse_expression
    return: int
    lexical: input, T ret(t)

    $call local_stack
    $while 1
        $call local_stack_new
	$call input_start
        $(set:unary_context=t->prev==NULL || t->prev->type==T_OPERATOR || t->prev->type == T_OP_UNARY)
        # $(set:binary_context=t->prev && t-prev->type!=T_OPERATOR)
        $if $(unary_context)
            $if match_char('(')
                $call input_start
                parse_expression()
                $call expect, ')'
                reduce_unary(t)
            $call @match_op_unary
            $elif match_Number()
                reduce_unary(t)
            $elif match_identifier()
                $call get_ts_token
                skip_space()
                $if match_char('(')
                    $call @parse_expression_list
                    $call expect, ')'
                    $call @do_function_call
                    reduce_unary(t)
                $else
                    $call @find_constant
                    reduce_unary(t)
            $else
                $call local_stack_back
                $if t && t->type==T_OPERATOR
                    $call warn, "Syntax Error.\n"
                break
        $else
            $call match_op_char, +, 1
            $call match_op_char, -, 1
            $call match_op_char, *, 2
            $call match_op_char, /, 2
            $else
                $call local_stack_back
                break



    $if t->type == T_INVALID
        return 0
    $else
        reduce_binary(t)
        memcpy(ret, t, sizeof(*t))
        return 1

#---------------------------------------- 
fncode: reduce_unary(T p)
    $while p && p->prev && p->prev->type==T_OP_UNARY
        $local T op
        op=p->prev
        $map reduce_unary_op, INT, DOUBLE, COMPLEX
        p->prev=op->prev
        free(op)

subcode: reduce_unary_op(type)
    $case p->type==T_$(type)
        unary_op_$(type)(p->prev, p)

#---------------------------------------- 
fncode: reduce_binary(T p)
    $while p && p->prev && p->prev->type==T_OPERATOR && p->prev->prev
        $local T op, T p2
        op=p->prev
        p2=op->prev
        $if p->type < p2->type
            up_convert(p, p2->type)
        $elif p2->type < p->type
            up_convert(p2, p->type)
        NOOP
        $map reduce_binary_op, INT, RATIO, DOUBLE, COMPLEX
        p->prev=p2->prev
        free(p2)
        free(op)

subcode: reduce_binary_op(type)
    $case p->type==T_$(type)
        binary_op_$(type)(op, p2, p)

#----------------------------------------------- 
subcode:: match_op_unary
    $elif match_char('-')
	t->type=T_OP_UNARY
        t->u.op[0]='-'

#---------------------------------------- 
subcode: match_op_char(op, precedence)
    $case match_char('$(op)')
        set_value_operator(t, '$(op)', $(precedence))
        $call check_precedence

subcode: match_op(op, name, precedence)
    $elif match_keyword("$(op)")
	$(if:!$(name))
	    $(autoinc:operator_type)
	    $define($(name)) $(operator_type)+128
	set_value_operator(t, $(name), $(precedence))
        $call check_precedence

subcode: check_precedence
    $if t->prev && t->prev->prev && $(precedence)<=t->prev->prev->u.op[1]
        reduce_binary(t->prev)
