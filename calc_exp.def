# include: DefParser/parser.def
# include: DefParser/parser_pattern.def

subcode:: _autoload
    $global n_prec

# -----------------------------------------
fncode: parse_expression
    $return_type int
    $global f_value
    return parse_add()

    # ---------------
    $list parse_prime

    &call op_left, add, mult, '+', '-'
	$if *ts_op=='+'
	    $call do_binary_op, +
	$else
	    $call do_binary_op, -

    &call op_left, mult, pow, '*', '/', '%'
	$if *ts_op=='*'
	    $call do_binary_op, *
	$elif *ts_op=='/'
	    $call do_binary_op, /
	$else
	    f_value=(int)tf_a % (int)tf_b

    &call op_right, pow, prime, '^'
	f_value = pow(tf_a, tf_b)

fncode: parse_prime
    $list match_Number

    $call input_start
    $if match_char('(')
	$call input_start
	parse_expression()
	$call expect, ')'
	return 1
    $elif match_Number()
	return 1
    $elif match_identifier()
	$call get_ts_token
	$list check_symbol
	$if check_symbol(ts_token)
	    return 1
	$else
	    $global string symbol
	    symbol.$set ts_token
	    skip_space()
	    tb_has_bracket=0
	    $if match_char('(')
		tb_has_bracket=1
	    $call @parse_exp_list
	    $if tb_has_bracket
		$fcall match_bracket('(')
	    $call @do_function_call
	return 1
    $else
	return 0
	
# -------------------------------------
subcode: debug_fcall
    # print Running $(FunctionName) ...

# ------------------------------------
subcode: do_binary_op(op)
    f_value = tf_a $(op) tf_b

subcode: op_left(name, parse, @op_list)
    $call build_op_macro, $(op_list)
    $function parse_$(name)
	$if parse_$(parse)()
	    tf_a=f_value
	    $call input_start
	    $while $(op)
		ts_op=$(input)->buffer+$(input)->n_start
		skip_space()
		$if !parse_$(parse)()
		    $call @parse_error, parse_$(parse)
		tf_b=f_value
		BLOCK
		$(if:debug)
		    $print parse_$(name): a = $tf_a, b = $tf_b, ans = $f_value
		tf_a=f_value
		$call input_start
	    return 1
	$else
	    return 0

subcode: op_right(name, parse, @op_list)
    $call build_op_macro, $(op_list)
    $function parse_$(name)
	$if parse_$(parse)()
	    tf_a=f_value
	    $call input_start
	    $if $(op)
		ts_op=$(input)->buffer+$(input)->n_start
		skip_space()
		$if !parse_$(name)()
		    $call @parse_error, parse_$(parse)
		tf_b=f_value
		BLOCK
		$(if:debug)
		    $print parse_$(name): a = $tf_a, b = $tf_b, ans = $f_value
		$call input_start
	    return 1
	$else
	    return 0
