fncode: parse_expression
    return: int
    lexical: input, T t

    $while 1
	$call input_start
	$if match_char('(')
	    $call input_start
	    parse_expression()
	    $call expect, ')'
	    $call check_push_stack, atom
	$call @match_operators
	$elif match_Number()
	    $call check_push_stack, atom
	$elif match_identifier()
	    $call get_ts_token
	    skip_space()
	    $if match_char('(')
		$call @parse_expression_list
		$call expect, ')'
		$call do_function_call
		$call check_push_stack, atom
	    $else
		$call @find_constant
		$call check_push_stack, atom
	$else
	    $call wrap_stack
	    return 1

#----------------------------------------------- 
subcode: check_push_stack(type)
    $(if:type=atom)
	$if p_last && p_last->type==T_OP_UNARY
	    $if value.type==T_INT
		$call get_value, int
		$call set_value, int, -$(v)
	    p_last->type=value.type
	    memcpy(value.data, p_last->data, 16)
	$else
	    $call push_stack
    $(else)
	$(set:prec=$(type))
	$if p_last_2 && p_last_2->type==T_OPERATOR && p_last_2->$(OP_P)>=$(prec)
	    $call reduce_stack
	$call push_stack

subcode: wrap_stack
    $while p_last_2 && p_last_2->type==T_OPERATOR
	$call reduce_stack

subcode: reduce_stack
    $if $map p_last_2->$(OP_V)==$1, '+'|'-'|'*'|'/'
	$local struct stack_node * p
	p=p_last_2->prev
	$if p->type==T_INT && p_last->type==T_INT

fncode: reduce_stack(struct stack_node * p)
    $local struct stack_node * p1
    $local struct stack_node * p2
    p1=p->prev
    p2=p1->prev

#----------------------------------------------- 
subcode:: match_operators
    $(set:unary_context=n_stack_size==0 || stack[-1].type==T_OPERATOR)
    $elif ($(unary_context)) && match_char('-')
	$call set_global_value, T_OP_UNARY, int, '-'
	$call check_push_stack, unary

subcode:: match_operators
    $call match_op_char, +, 1
    $call match_op_char, -, 1
    $call match_op_char, *, 2

subcode: match_op_char(op, precedence)
    $elif match_char('$(op)')
	$call set_global_operator, '$(op)', $(precedence)
	$call check_push_stack, $(precedence)

subcode: match_op(op, name, precedence)
    $elif match_keyword("$(op)")
	$(if:!$(name))
	    $(autoinc:operator_type)
	    $define($(name)) $(operator_type)+128
	$call set_global_operator, $(name), $(precdence)
	$call check_push_stack, $(precedence)

