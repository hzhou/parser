subcode: parse_expression_list
    $local T t_temp, T tlist[10]
    t_temp=t
    count=0
    $call local_stack_new
    $if parse_expression()
        $call parse_expression_list_item
        $while match_char(',')
            $call local_stack_new
            parse_expression()
            $call parse_expression_list_item
    t=t_temp

subcode: parse_expression_list_item
    $if count<10
        tlist[count]=t
    count++
    skip_space()

subcode: do_function_call
    $call @do_function_call_all
    $for i=0:count
        $if i<10
            free(tlist[i])

# ------------------------------------
subcode: find_constant
    $if ts_token $eq "pi" 
        t->type=T_DOUBLE
        $call get_value_double, t
	$(v)=3.1415926535
    $else
        t->type=T_INT
        $call get_value_int, t
	$(v)=0

subcode: do_function_call_all
    $if count==1
        $local double tf_temp
        $if tlist[0]->type==T_INT
            tf_temp=(double)*((int*)&(tlist[0]->data[0]))
        $elif tlist[0]->type==T_DOUBLE
            tf_temp=*((double*)&(tlist[0]->data[0]))
        $else
            tf_temp=*((double*)&(tlist[0]->data[0]))
        t->type=T_DOUBLE
        $call get_value_double, t

        $map trig_call, sin, cos, tan 
        $map trig_inv_call, asin, acos, atan
        $map simple_call, sqrt, exp, log10, log
        &call single_call, abs
            $(v) = fabs(tf_temp)
        $else
            $print "    Function not supported: %s", ts_token

subcode: single_call(name)
    $case ts_token $eq "$(name)"
        BLOCK

subcode: simple_call(name)
    &call single_call, $(name)
	$(v)=$(name)(tf_temp)

subcode: trig_call(name)
    &call single_call, $(name)
	$(v)=$(name)(tf_temp*3.1415926535/180.0)

subcode: trig_inv_call(name)
    &call single_call, $(name)
	$(v)=$(name)(tf_temp)/3.1415926535*180.0
