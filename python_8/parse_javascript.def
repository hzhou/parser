include: python/parse.def
include: macros_javascript/frame.def
include: macros_javascript/setup.def
include: macros_javascript/support.def
include: macros_javascript/operations.def

#---- main --------------
page: parse_javascript, basic_frame
    module: python

    &call quote, s
        a=1
        1+2*3;
        !a?2:3

    parse_javascript(s)

#---- ------------------
fncode: parse_javascript(src)
    $call parse_operator_precedence

    #-- spaces and comments -----
    subcode:: match
        $if $(type:-1) in boc_type
            $call skip_space_wide
        $else
            $call skip_space_narrow
        $if src_pos>=src_len
            continue

    #-- end of statement ----
    subcode:: match
        $if match_end_of_statement()
            cur = (';', ';')
            break

    #-- if  ----------------
    subcode:: match
        $if_match if
            $call skip_space_wide
            $if_match (
                stack.append: ("if_cond", "boc")
            $else
                $call error, "if missing ("

    subcode:: reduce_context
        $if $(atom:-2)=="if_cond"
            # got condition in stack[-1]
            cur = ("if_block", "boc")

    subcode:: on_statement
        $if stack[-1][0]=="if_block"
            stack.pop()

    #-- identifiers --------------
    subcode:: match
        $if_match $(pat_identifier)
            cur = (m.group(0), "identifier")
            break


    #-- match primary -------------------------
    subcode:: match
        #- keyword data -----------
        &call if_match_break, true|false
            cur = (m.group(0), "bool")
        &call if_match_break, null
            cur = (m.group(0), "null")

        #- string ------------
        &call if_match_break, \"(([^\\\"]|\\.)*)\"
            s=js_double_string(m.group(1))
            cur = (s, "string")
        &call if_match_break, '(([^\\']|\\.)*)'
            s=js_single_string(m.group(1))
            cur = (s, "string")
        &call if_match_break, /([^\\]|\\.)+/[igm]*
            cur = (m.group(0), "regex")

        #- numbers ------------
        &call if_match_break, r"0x[0-9a-f]+", re.I
            cur = (int(m.group(0), 16), "int")
        &call if_match_break, r"0[0-7]*", re.I
            cur = (int(m.group(0), 8), "int")
        &call if_match_break, (\d+)(\.\d+)?([eE][+-]?\d+)?
            $if m.group(2) or m.group(3)
                cur = (float(m.group(0)), "float")
            $else
                cur = (int(m.group(1)), "int")

    #-- match brackets -------------------------
        &call if_match_continue, [\[\(\{]
            op = m.group(0)
            $if $(type:-1) in atom_type
                $if op == '('
                    $call start_context, fcall
                $elif op== '['
                    $call start_context, index
                $else
                    $call error, "error opening bracket '"+op+"', forgot ';'?"
            $else
                $if op == '{'
                    $if $(type:-1)=='boc'
                        $call start_context, compound
                    $else
                        $call start_context, object
                $elif op == '['
                    $call start_context, array
                $else # plain old parenthesis!
                    stack.append: ('(', '(')

        &call if_match_break, [\]\)\}]
            op = m.group(0)
            cur = (op, ')')
            #- operators need to be separated by atom
            #-   empty brackets is a problem. Hack it.
            $if $(type:-1)=='(' or $(type:-1)=="boc"
                stack.append: ('', '')

    #-- match operators -------------------------
    subcode:: match
        $if_match \+\+|--
            op = m.group(0)
            $if $(type:-1) in atom_type
                $call @reduce_postfix
            $else
                stack.append: (op, "unary")
            continue

        $call match_op, new|in|delete|typeof|void|instanceof
        $call match_op, (==?=?|!==?|>>?>?=?|<<?=?|&&?|\|\|?)
        $call match_op, [+\-*/%^&|]=?
        $call match_op, [,~!\?:]

        subcode: match_op(@pat)
            $if_match $(pat)
                op = m.group(0)
                cur = (op, op)
                break

    #-- reduce -------------------------
    subcode: reduce
        # - group operators ----------
        $if $(type:-2) == 'boc'
            $call @reduce_context
            break
        $elif $(type:-2) == '('
            cur = stack[-1]
            stack[-2:]=[]
            break
        # - normal operators ----------
        $elif $(type:-2) == ','
            $call reduce_list
        $elif $(type:-2) == "unary"
            t = ( ($(atom:-2), stack[-1]), "unary_exp")
            stack[-2:]=[t]
        $elif $(type:-2) == ':'
            $if len(stack)>5 and $(type:-4)=='?'
                t = ( (stack[-5], stack[-3], stack[-1]), "conditional_exp")
                stack[-5:]=[t]
            $else
                $call error, "Conditional expression messed up!"
        $else
            t = ( ($(type:-2), stack[-3], stack[-1]), "binary_exp")
            stack[-3:]=[t]

    #-- reduce list --------------
    subcode: reduce_list
        t=stack[-3]
        $if t[1]=="list_exp"
            t[0].append( stack[-1] )
        $else
            t = ( [stack[-3], stack[-1]], "list_exp")
        stack[-3:]=[t]

    #-- reduce postfix ------------------
    subcode: reduce_postfix
        stack[-1] = ( (op, stack[-1]), "postfix_exp")

    #-- reduce context ---------
    subcode: reduce_context
        t_op      = cur
        t_context = $(atom:-2)
        t_atom    = stack[-1]
        cur = None
        stack[-2:]=[]
        $call pop_context
        $if 0
            pass
        $call @reduce_context_cases

    subcode:: reduce_context_cases
        $elif t_context == "fcall"
            stack[-1]=( (stack[-1], t_atom), "fcall")
        $elif t_context == "index"
            stack[-1]=( (stack[-1], t_atom), "index")
        $elif t_context == "array"
            $if t_atom[1]==""
                t_atom=[]
            cur = (t_atom, "array")
        $elif t_context == "object"
            $if t_atom[1]==""
                t_atom=[]
            cur = (t_atom, "object")

    #-- compound statement ----------
    subcode:: on_reduce_context
        $if t_context =="compound"
            got_statement(t_atom)

    #-- post process -------------
    subcode: post_process
        $if $(cur_type) == ';'
            stmt = stack.pop()
            got_statement(stmt)
            continue

    fncode: got_statement(stmt)
        $call @on_statement
        print stmt

    #-- return ------------------
    subcode: return
        return

