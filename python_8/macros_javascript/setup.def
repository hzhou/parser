fncode:: parse_javascript
    subcode:: precedence
        ';':1
        ',':1
        '=':2
        '+=':2
        '-=':2
        '*=':2
        '/=':2
        '%=':2
        '&=':2
        '^=':2
        '|=':2
        '<<=':2
        '>>=':2
        '>>>=':2
        '?':2 # conditional 
        ':':2
        '||':4
        '&&':5
        '|':6
        '^':7
        '&':8
        '==':9
        '!=':9
        '===':9
        '!==':9
        'instanceof':10
        'in':10
        '<':10
        '<=':10
        '>':10
        '>=':10
        '<<':11
        '>>':11
        '>>>':11
        '+':12
        '-':12
        '*':13
        '/':13
        '%':13
        '.':15

    subcode:: setup
        literal_type = ["bool", "null", "int", "float", "string", "regex"]
        float_type  = ["float"]
        number_type = ["int", "float", "num"]

        compound_type = ["array", "object", "function"]

        expr_type   = ["identifier"]
        expr_type.extend: ["binary_exp", "unary_exp", "list_exp", "postfix_exp", "conditional_exp"]
        expr_type.extend: ["member", "fcall", "index"]

        atom_type.extend: literal_type
        atom_type.extend: number_type
        atom_type.extend: compound_type
        atom_type.extend: expr_type
        atom_type.append: "object_item"

        is_op_unary = ["~", "!", "delete", "new", "typeof", "void"]

        unary_type.extend: ["+", "-", "++", "--"]
        unary_type.extend: is_op_unary

        right_precedences = [2,3]

    fncode: less_precedence(op1, op2)
        p1 = precedence[op1]
        p2 = precedence[op2]
        $if op1 == '?'
            return p2 > 3
        $else 
            $if p1 == p2
                $if op2=='?'
                    return 0
                $elif op1==':'
                    return 1
                $elif p2==2
                    return 0
                $else
                    return 1
            $else
                return p1 < p2
                
