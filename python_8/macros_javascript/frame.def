fncode:: parse_javascript
    macros:
        pat_identifier: [a-zA-Z_\$]\w*

    #-- context ---------------
    subcode:: setup
        context_stack = []
        cur_context = {'type':"global", 'statements':[]}
        last_context= None

    subcode: start_context(type, expect)
        context_stack.append: cur_context
        cur_context = {"type":"$(type)", "expect":"$(expect)"}
        stack.append: ("$(type)", "boc")

    subcode: restart_context(type, expect)
        # e.g. if (cond_context) if_block context 
        context_stack.append: cur_context
        cur_context = last_context
        cur_context["type"]   = "$(type)"
        cur_context["expect"] = "$(expect)"
        stack.append: ("$(type)", "boc")

    subcode: pop_context
        last_context= cur_context
        cur_context = context_stack.pop()

    #-- return -------------
    subcode: return
        return cur_context

    #-- debug -------------
    fncode: synopsis(s, N, i, n)
        i0=i-N
        i1=i+N
        t_pre="..."
        t_post="..."

        $if i0<0
            i0=0
            t_pre=""
        $if i1>n
            i1=n
            t_post=""

        return (t_pre+s[i0:i], s[i:i1]+t_post)

    subcode: error(msg)
        print_stack(stack)

        print "cur: ", cur

        (s0, s1)=synopsis(src, 40, src_pos, src_len)
        $print source[$src_pos]: "$s0" + "$s1" 

        raise Exception($(msg))
